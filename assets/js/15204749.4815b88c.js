"use strict";(self.webpackChunkcompose_swr_docs=self.webpackChunkcompose_swr_docs||[]).push([[275],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3141:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return u},toc:function(){return c},default:function(){return m}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],l={slug:"/"},s="Getting Started",p={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Installation",source:"@site/docs/01-getting-started.md",sourceDirName:".",slug:"/",permalink:"/compose-swr/",editUrl:"https://github.com/burnoo/compose-swr/tree/main/docs/docs/01-getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/"},sidebar:"defaultSidebar"},u={},c=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Make It Reusable",id:"make-it-reusable",level:2},{value:"Fetcher abstraction and scoping",id:"fetcher-abstraction-and-scoping",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting Started"),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"TODO publish to maven"),(0,o.kt)("h2",{id:"quick-start"},"Quick Start"),(0,o.kt)("p",null,"For RESTful APIs with JSON data, first you need to configure HTTP client and JSON parsing, to use it in a ",(0,o.kt)("inlineCode",{parentName:"p"},"fetcher")," function.\nYou can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Ktor")," client with ",(0,o.kt)("inlineCode",{parentName:"p"},"kotlinx.serialization")," serializer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val client = HttpClient { install(JsonFeature) }\n\n@Serializable\ndata class IpResponse(val ip: String)\n")),(0,o.kt)("p",null,"Then you can and start using ",(0,o.kt)("inlineCode",{parentName:"p"},"useSWR")," inside any ",(0,o.kt)("inlineCode",{parentName:"p"},"@Composable")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Composable\nfun App() {\n    val (data, error) = useSWR(\n        key = "https://api.ipify.org?format=json",\n        fetcher = { client.request<IpResponse>(it) }\n    )\n\n    when {\n        error != null -> Text(text = "Failed to load")\n        data != null -> Text(text = data.ip)\n        else -> Text(text = "Loading")\n    }\n}\n')),(0,o.kt)("p",null,'Normally, there\'re 3 possible states of a request: "loading", "ready", or "error". You can use the value of ',(0,o.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," to\ndetermine the current state of the request, and return the corresponding UI."),(0,o.kt)("h2",{id:"make-it-reusable"},"Make It Reusable"),(0,o.kt)("p",null,"When building an app, you might need to reuse the data in many places of the UI. It is incredibly easy to create reusable data hooks\non top of SWR:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'sealed class IpUiState {\n    object Loading : IpUiState()\n    object Error : IpUiState()\n    data class Loaded(val ip: String) : IpUiState()\n}\n\n@Composable\nfun useIp(): IpUiState {\n    val (data, error) = useSWR(\n        key = "https://api.ipify.org?format=json",\n        fetcher = { client.request<IpResponse>(it) }\n    )\n\n    return when {\n        error != null -> IpUiState.Error\n        data != null -> IpUiState.Loaded(data.ip)\n        else -> IpUiState.Loading\n    }\n}\n')),(0,o.kt)("p",null,"And use it in your components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun IpComponent() {\n    when (val ipState = useIp()) {\n        is IpUiState.Loading -> CircularProgressIndicator()\n        is IpUiState.Error -> ErrorBox()\n        is IpUiState.Loaded -> IpBox(ip = ipState.ip)\n    }\n}\n")),(0,o.kt)("p",null,"By adopting this pattern, you can forget about ",(0,o.kt)("strong",{parentName:"p"},"fetching")," data in the imperative way: start the request, update the loading state, and return the final result.\nInstead, your code is more declarative: you just need to specify what data is used by the component."),(0,o.kt)("h2",{id:"fetcher-abstraction-and-scoping"},"Fetcher abstraction and scoping"),(0,o.kt)("p",null,"Storing bare ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpClient")," as the global property is not considered to be a good practice and may lead to memory leaks.\nIt is suggested to use abstraction to hide http implementation details from composables, e.g:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'internal sealed class Request<out D>(val url: String) {\n    object Ip : Request<IpResponse>(url = "https://api.ipify.org?format=json")\n}\n\ninternal class Fetcher(internal val client: HttpClient) {\n\n    internal suspend inline operator fun <reified T> invoke(request: Request<T>) : T {\n        return client.request(request.url)\n    }\n}\n')),(0,o.kt)("p",null,"Then, you should scope ",(0,o.kt)("inlineCode",{parentName:"p"},"Fetcher")," instance to Composable application. It can be done using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/burnoo/cokoin"},"cokoin")," - Compose DI library:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val apiModule = module {\n    single { HttpClient { install(JsonFeature) } }\n\n    single { Fetcher(client = get()) }\n}\n\n@Composable\nfun useIp(): IpUiState {\n    val fetcher = get<Fetcher>()\n    val (data, error) = useSWR(\n        key = Request.Ip,\n        fetcher = { fetcher(it) },\n    )\n    return when {\n        error != null -> IpUiState.Error\n        data != null -> IpUiState.Loaded(data.ip)\n        else -> IpUiState.Loading\n    }\n}\n\n@Composable\nfun App() {\n    Koin(appDeclaration = { modules(apiModule) }) {\n        IpComponent()\n    }\n}\n")))}m.isMDXComponent=!0}}]);